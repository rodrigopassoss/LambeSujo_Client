// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vssref_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vssref_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vssref_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vssref_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vssref_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vssref_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vssref_5fcommand_2eproto;
namespace VSSRef {
namespace ref_to_team {
class VSSRef_Command;
class VSSRef_CommandDefaultTypeInternal;
extern VSSRef_CommandDefaultTypeInternal _VSSRef_Command_default_instance_;
}  // namespace ref_to_team
}  // namespace VSSRef
PROTOBUF_NAMESPACE_OPEN
template<> ::VSSRef::ref_to_team::VSSRef_Command* Arena::CreateMaybeMessage<::VSSRef::ref_to_team::VSSRef_Command>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VSSRef {
namespace ref_to_team {

// ===================================================================

class VSSRef_Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VSSRef.ref_to_team.VSSRef_Command) */ {
 public:
  inline VSSRef_Command() : VSSRef_Command(nullptr) {};
  virtual ~VSSRef_Command();

  VSSRef_Command(const VSSRef_Command& from);
  VSSRef_Command(VSSRef_Command&& from) noexcept
    : VSSRef_Command() {
    *this = ::std::move(from);
  }

  inline VSSRef_Command& operator=(const VSSRef_Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline VSSRef_Command& operator=(VSSRef_Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VSSRef_Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VSSRef_Command* internal_default_instance() {
    return reinterpret_cast<const VSSRef_Command*>(
               &_VSSRef_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VSSRef_Command& a, VSSRef_Command& b) {
    a.Swap(&b);
  }
  inline void Swap(VSSRef_Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VSSRef_Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VSSRef_Command* New() const final {
    return CreateMaybeMessage<VSSRef_Command>(nullptr);
  }

  VSSRef_Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VSSRef_Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VSSRef_Command& from);
  void MergeFrom(const VSSRef_Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VSSRef_Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VSSRef.ref_to_team.VSSRef_Command";
  }
  protected:
  explicit VSSRef_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vssref_5fcommand_2eproto);
    return ::descriptor_table_vssref_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFoulFieldNumber = 1,
    kTeamcolorFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kFoulQuadrantFieldNumber = 3,
    kGameHalfFieldNumber = 5,
  };
  // .VSSRef.Foul foul = 1;
  void clear_foul();
  ::VSSRef::Foul foul() const;
  void set_foul(::VSSRef::Foul value);
  private:
  ::VSSRef::Foul _internal_foul() const;
  void _internal_set_foul(::VSSRef::Foul value);
  public:

  // .VSSRef.Color teamcolor = 2;
  void clear_teamcolor();
  ::VSSRef::Color teamcolor() const;
  void set_teamcolor(::VSSRef::Color value);
  private:
  ::VSSRef::Color _internal_teamcolor() const;
  void _internal_set_teamcolor(::VSSRef::Color value);
  public:

  // double timestamp = 4;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // .VSSRef.Quadrant foulQuadrant = 3;
  void clear_foulquadrant();
  ::VSSRef::Quadrant foulquadrant() const;
  void set_foulquadrant(::VSSRef::Quadrant value);
  private:
  ::VSSRef::Quadrant _internal_foulquadrant() const;
  void _internal_set_foulquadrant(::VSSRef::Quadrant value);
  public:

  // .VSSRef.Half gameHalf = 5;
  void clear_gamehalf();
  ::VSSRef::Half gamehalf() const;
  void set_gamehalf(::VSSRef::Half value);
  private:
  ::VSSRef::Half _internal_gamehalf() const;
  void _internal_set_gamehalf(::VSSRef::Half value);
  public:

  // @@protoc_insertion_point(class_scope:VSSRef.ref_to_team.VSSRef_Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int foul_;
  int teamcolor_;
  double timestamp_;
  int foulquadrant_;
  int gamehalf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vssref_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VSSRef_Command

// .VSSRef.Foul foul = 1;
inline void VSSRef_Command::clear_foul() {
  foul_ = 0;
}
inline ::VSSRef::Foul VSSRef_Command::_internal_foul() const {
  return static_cast< ::VSSRef::Foul >(foul_);
}
inline ::VSSRef::Foul VSSRef_Command::foul() const {
  // @@protoc_insertion_point(field_get:VSSRef.ref_to_team.VSSRef_Command.foul)
  return _internal_foul();
}
inline void VSSRef_Command::_internal_set_foul(::VSSRef::Foul value) {
  
  foul_ = value;
}
inline void VSSRef_Command::set_foul(::VSSRef::Foul value) {
  _internal_set_foul(value);
  // @@protoc_insertion_point(field_set:VSSRef.ref_to_team.VSSRef_Command.foul)
}

// .VSSRef.Color teamcolor = 2;
inline void VSSRef_Command::clear_teamcolor() {
  teamcolor_ = 0;
}
inline ::VSSRef::Color VSSRef_Command::_internal_teamcolor() const {
  return static_cast< ::VSSRef::Color >(teamcolor_);
}
inline ::VSSRef::Color VSSRef_Command::teamcolor() const {
  // @@protoc_insertion_point(field_get:VSSRef.ref_to_team.VSSRef_Command.teamcolor)
  return _internal_teamcolor();
}
inline void VSSRef_Command::_internal_set_teamcolor(::VSSRef::Color value) {
  
  teamcolor_ = value;
}
inline void VSSRef_Command::set_teamcolor(::VSSRef::Color value) {
  _internal_set_teamcolor(value);
  // @@protoc_insertion_point(field_set:VSSRef.ref_to_team.VSSRef_Command.teamcolor)
}

// .VSSRef.Quadrant foulQuadrant = 3;
inline void VSSRef_Command::clear_foulquadrant() {
  foulquadrant_ = 0;
}
inline ::VSSRef::Quadrant VSSRef_Command::_internal_foulquadrant() const {
  return static_cast< ::VSSRef::Quadrant >(foulquadrant_);
}
inline ::VSSRef::Quadrant VSSRef_Command::foulquadrant() const {
  // @@protoc_insertion_point(field_get:VSSRef.ref_to_team.VSSRef_Command.foulQuadrant)
  return _internal_foulquadrant();
}
inline void VSSRef_Command::_internal_set_foulquadrant(::VSSRef::Quadrant value) {
  
  foulquadrant_ = value;
}
inline void VSSRef_Command::set_foulquadrant(::VSSRef::Quadrant value) {
  _internal_set_foulquadrant(value);
  // @@protoc_insertion_point(field_set:VSSRef.ref_to_team.VSSRef_Command.foulQuadrant)
}

// double timestamp = 4;
inline void VSSRef_Command::clear_timestamp() {
  timestamp_ = 0;
}
inline double VSSRef_Command::_internal_timestamp() const {
  return timestamp_;
}
inline double VSSRef_Command::timestamp() const {
  // @@protoc_insertion_point(field_get:VSSRef.ref_to_team.VSSRef_Command.timestamp)
  return _internal_timestamp();
}
inline void VSSRef_Command::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void VSSRef_Command::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:VSSRef.ref_to_team.VSSRef_Command.timestamp)
}

// .VSSRef.Half gameHalf = 5;
inline void VSSRef_Command::clear_gamehalf() {
  gamehalf_ = 0;
}
inline ::VSSRef::Half VSSRef_Command::_internal_gamehalf() const {
  return static_cast< ::VSSRef::Half >(gamehalf_);
}
inline ::VSSRef::Half VSSRef_Command::gamehalf() const {
  // @@protoc_insertion_point(field_get:VSSRef.ref_to_team.VSSRef_Command.gameHalf)
  return _internal_gamehalf();
}
inline void VSSRef_Command::_internal_set_gamehalf(::VSSRef::Half value) {
  
  gamehalf_ = value;
}
inline void VSSRef_Command::set_gamehalf(::VSSRef::Half value) {
  _internal_set_gamehalf(value);
  // @@protoc_insertion_point(field_set:VSSRef.ref_to_team.VSSRef_Command.gameHalf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ref_to_team
}  // namespace VSSRef

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vssref_5fcommand_2eproto
