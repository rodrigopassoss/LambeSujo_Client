// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vssref_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vssref_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vssref_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vssref_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vssref_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vssref_5fcommon_2eproto;
namespace VSSRef {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
}  // namespace VSSRef
PROTOBUF_NAMESPACE_OPEN
template<> ::VSSRef::Frame* Arena::CreateMaybeMessage<::VSSRef::Frame>(Arena*);
template<> ::VSSRef::Robot* Arena::CreateMaybeMessage<::VSSRef::Robot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VSSRef {

enum Foul : int {
  FREE_KICK = 0,
  PENALTY_KICK = 1,
  GOAL_KICK = 2,
  FREE_BALL = 3,
  KICKOFF = 4,
  STOP = 5,
  GAME_ON = 6,
  HALT = 7,
  Foul_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Foul_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Foul_IsValid(int value);
constexpr Foul Foul_MIN = FREE_KICK;
constexpr Foul Foul_MAX = HALT;
constexpr int Foul_ARRAYSIZE = Foul_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Foul_descriptor();
template<typename T>
inline const std::string& Foul_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Foul>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Foul_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Foul_descriptor(), enum_t_value);
}
inline bool Foul_Parse(
    const std::string& name, Foul* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Foul>(
    Foul_descriptor(), name, value);
}
enum Color : int {
  BLUE = 0,
  YELLOW = 1,
  NONE = 2,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = BLUE;
constexpr Color Color_MAX = NONE;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    const std::string& name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
enum Quadrant : int {
  NO_QUADRANT = 0,
  QUADRANT_1 = 1,
  QUADRANT_2 = 2,
  QUADRANT_3 = 3,
  QUADRANT_4 = 4,
  Quadrant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Quadrant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Quadrant_IsValid(int value);
constexpr Quadrant Quadrant_MIN = NO_QUADRANT;
constexpr Quadrant Quadrant_MAX = QUADRANT_4;
constexpr int Quadrant_ARRAYSIZE = Quadrant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Quadrant_descriptor();
template<typename T>
inline const std::string& Quadrant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Quadrant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Quadrant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Quadrant_descriptor(), enum_t_value);
}
inline bool Quadrant_Parse(
    const std::string& name, Quadrant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Quadrant>(
    Quadrant_descriptor(), name, value);
}
enum Half : int {
  NO_HALF = 0,
  FIRST_HALF = 1,
  SECOND_HALF = 2,
  OVERTIME_FIRST_HALF = 3,
  OVERTIME_SECOND_HALF = 4,
  PENALTY_SHOOTOUTS = 5,
  Half_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Half_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Half_IsValid(int value);
constexpr Half Half_MIN = NO_HALF;
constexpr Half Half_MAX = PENALTY_SHOOTOUTS;
constexpr int Half_ARRAYSIZE = Half_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Half_descriptor();
template<typename T>
inline const std::string& Half_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Half>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Half_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Half_descriptor(), enum_t_value);
}
inline bool Half_Parse(
    const std::string& name, Half* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Half>(
    Half_descriptor(), name, value);
}
// ===================================================================

class Robot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VSSRef.Robot) */ {
 public:
  inline Robot() : Robot(nullptr) {};
  virtual ~Robot();

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(nullptr);
  }

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VSSRef.Robot";
  }
  protected:
  explicit Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vssref_5fcommon_2eproto);
    return ::descriptor_table_vssref_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kRobotIdFieldNumber = 1,
  };
  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double orientation = 4;
  void clear_orientation();
  double orientation() const;
  void set_orientation(double value);
  private:
  double _internal_orientation() const;
  void _internal_set_orientation(double value);
  public:

  // uint32 robot_id = 1;
  void clear_robot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id() const;
  void set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_robot_id() const;
  void _internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:VSSRef.Robot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vssref_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VSSRef.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {};
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VSSRef.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vssref_5fcommon_2eproto);
    return ::descriptor_table_vssref_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotsFieldNumber = 2,
    kTeamColorFieldNumber = 1,
  };
  // repeated .VSSRef.Robot robots = 2;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  ::VSSRef::Robot* mutable_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VSSRef::Robot >*
      mutable_robots();
  private:
  const ::VSSRef::Robot& _internal_robots(int index) const;
  ::VSSRef::Robot* _internal_add_robots();
  public:
  const ::VSSRef::Robot& robots(int index) const;
  ::VSSRef::Robot* add_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VSSRef::Robot >&
      robots() const;

  // .VSSRef.Color teamColor = 1;
  void clear_teamcolor();
  ::VSSRef::Color teamcolor() const;
  void set_teamcolor(::VSSRef::Color value);
  private:
  ::VSSRef::Color _internal_teamcolor() const;
  void _internal_set_teamcolor(::VSSRef::Color value);
  public:

  // @@protoc_insertion_point(class_scope:VSSRef.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VSSRef::Robot > robots_;
  int teamcolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vssref_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Robot

// uint32 robot_id = 1;
inline void Robot::clear_robot_id() {
  robot_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot::_internal_robot_id() const {
  return robot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot::robot_id() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.robot_id)
  return _internal_robot_id();
}
inline void Robot::_internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  robot_id_ = value;
}
inline void Robot::set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:VSSRef.Robot.robot_id)
}

// double x = 2;
inline void Robot::clear_x() {
  x_ = 0;
}
inline double Robot::_internal_x() const {
  return x_;
}
inline double Robot::x() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.x)
  return _internal_x();
}
inline void Robot::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Robot::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:VSSRef.Robot.x)
}

// double y = 3;
inline void Robot::clear_y() {
  y_ = 0;
}
inline double Robot::_internal_y() const {
  return y_;
}
inline double Robot::y() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.y)
  return _internal_y();
}
inline void Robot::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Robot::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:VSSRef.Robot.y)
}

// double orientation = 4;
inline void Robot::clear_orientation() {
  orientation_ = 0;
}
inline double Robot::_internal_orientation() const {
  return orientation_;
}
inline double Robot::orientation() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.orientation)
  return _internal_orientation();
}
inline void Robot::_internal_set_orientation(double value) {
  
  orientation_ = value;
}
inline void Robot::set_orientation(double value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:VSSRef.Robot.orientation)
}

// -------------------------------------------------------------------

// Frame

// .VSSRef.Color teamColor = 1;
inline void Frame::clear_teamcolor() {
  teamcolor_ = 0;
}
inline ::VSSRef::Color Frame::_internal_teamcolor() const {
  return static_cast< ::VSSRef::Color >(teamcolor_);
}
inline ::VSSRef::Color Frame::teamcolor() const {
  // @@protoc_insertion_point(field_get:VSSRef.Frame.teamColor)
  return _internal_teamcolor();
}
inline void Frame::_internal_set_teamcolor(::VSSRef::Color value) {
  
  teamcolor_ = value;
}
inline void Frame::set_teamcolor(::VSSRef::Color value) {
  _internal_set_teamcolor(value);
  // @@protoc_insertion_point(field_set:VSSRef.Frame.teamColor)
}

// repeated .VSSRef.Robot robots = 2;
inline int Frame::_internal_robots_size() const {
  return robots_.size();
}
inline int Frame::robots_size() const {
  return _internal_robots_size();
}
inline void Frame::clear_robots() {
  robots_.Clear();
}
inline ::VSSRef::Robot* Frame::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:VSSRef.Frame.robots)
  return robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VSSRef::Robot >*
Frame::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:VSSRef.Frame.robots)
  return &robots_;
}
inline const ::VSSRef::Robot& Frame::_internal_robots(int index) const {
  return robots_.Get(index);
}
inline const ::VSSRef::Robot& Frame::robots(int index) const {
  // @@protoc_insertion_point(field_get:VSSRef.Frame.robots)
  return _internal_robots(index);
}
inline ::VSSRef::Robot* Frame::_internal_add_robots() {
  return robots_.Add();
}
inline ::VSSRef::Robot* Frame::add_robots() {
  // @@protoc_insertion_point(field_add:VSSRef.Frame.robots)
  return _internal_add_robots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VSSRef::Robot >&
Frame::robots() const {
  // @@protoc_insertion_point(field_list:VSSRef.Frame.robots)
  return robots_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VSSRef

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::VSSRef::Foul> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VSSRef::Foul>() {
  return ::VSSRef::Foul_descriptor();
}
template <> struct is_proto_enum< ::VSSRef::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VSSRef::Color>() {
  return ::VSSRef::Color_descriptor();
}
template <> struct is_proto_enum< ::VSSRef::Quadrant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VSSRef::Quadrant>() {
  return ::VSSRef::Quadrant_descriptor();
}
template <> struct is_proto_enum< ::VSSRef::Half> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VSSRef::Half>() {
  return ::VSSRef::Half_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vssref_5fcommon_2eproto
